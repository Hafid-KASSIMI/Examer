
package examer.db;


import examer.Settings;
import examer.util.DateTime;
import examer.util.EVENT_TYPE;
import examer.util.Event;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.stream.Collectors;
import org.sicut.sqlite.Table;

/**
 *
 * Generated by: S2JConverter
 * at 2020-12-24, 16:22:08
 * @author Hafid KASSIMI
 */

public final class ViewLikeTable extends Table {
    
    public ViewLikeTable() {
        super();
        setDatabase(Settings.DB_PATH);
    }
    
    public String listCurrentMatters(int idExam) {
        HashMap<String, ArrayList> records;
        ArrayList<String> result = new ArrayList();
        String whereClause = "m.idMatter=Plmb.idMatter and b.idBranch=Plmb.idBranch and Plmb.idExam=" + idExam + 
                " and p.idPlan=Plmb.idPlan and Plmb.planDate=date('now') and p.startTime<=strftime('%H:%M', time('now')) and " + 
                "time('now') <= time(p.startTime, strftime('%H', time(p.duration)) || ' hours', strftime('%M', time(p.duration)) || ' minutes')";
        name = " Matter m, Branch b, Plan p, Plmb";
        
        records = super.select(new String[] {"m.label as mat", "b.label as bra"}, whereClause);
        
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            result.add(records.get("mat").get(i).toString() + " [ " + records.get("bra").get(i).toString() + " ]");
        }
        return result.stream().collect(Collectors.joining(" | "));
    }
    
    public String listTodayWaitingMatters(int idExam) {
        HashMap<String, ArrayList> records;
        String result = "";
        String whereClause = "m.idMatter=Plmb.idMatter and b.idBranch=Plmb.idBranch and Plmb.idExam=" + idExam + 
                " and p.idPlan=Plmb.idPlan and Plmb.planDate=date('now') and p.startTime > strftime('%H:%M', time('now'))";
        name = " Matter m, Branch b, Plan p, Plmb";
        
        records = super.select(new String[] {"m.label as mat", "b.label as bra"}, whereClause);
        
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            result += records.get("mat").get(i).toString() + " [ " + records.get("bra").get(i).toString() + " ]" + " | ";
        }
        return result.isEmpty() ? "RAS" : result.substring(0, result.length() - 3);
    }
    
    private int getCandidatesAggregateCount(int idExam, String aggregate) {
        int count = 0;
        HashMap<String, ArrayList> res;
        name = "(select count(idCandidate) as n from Candidate c, Room r, Branch b, Exam_branch eb where r.idRoom=c.idRoom and b.idBranch=eb.idBranch and r.idBranch=b.idBranch and eb.idExam=" + idExam + " group by (r.idRoom))";
        res = super.select(new String[] { aggregate + "(n) as n" }, "1");
        try {
            count = (int) res.get("n").get(0);
        }
        catch ( Exception e ) {}
        return count;
    }
    
    public int getCandidatesMaxCount(int idExam) {
        return getCandidatesAggregateCount(idExam, "max");
    }
    
    public int getCandidatesMinCount(int idExam) {
        return getCandidatesAggregateCount(idExam, "min");
    }
    
    public double getCandidatesAvgCount(int idExam) {
        double count = 0;
        HashMap<String, ArrayList> res;
        name = "(select count(idCandidate) as n from Candidate c, Room r, Branch b, Exam_branch eb where r.idRoom=c.idRoom and b.idBranch=eb.idBranch and r.idBranch=b.idBranch and eb.idExam=" + idExam + " group by (r.idRoom))";
        res = super.select(new String[] { "avg(n) as n" }, "1");
        try {
            count = (double) res.get("n").get(0);
        }
        catch ( Exception e ) {}
        return count;
    }
    
    public int getCandidatesCount(int idExam, String idRoom, String gender) {
        int count = 0;
        name = "Candidate c, Room r, Branch b, Exam_branch eb";
        HashMap<String, ArrayList> res = super.select(new String[] {"count(*) as n"}, "r.idRoom=c.idRoom and c.gender like '" + gender + "' and r.idRoom like '" + idRoom +  "' and b.idBranch=eb.idBranch and r.idBranch=b.idBranch and eb.idExam=" + idExam);
        try {
            count = (int) res.get("n").get(0);
        }
        catch ( Exception e ) { }
        return count;
    }
    
    public int getCandidatesCount(int idExam, int idRoom, String gender) {
        return getCandidatesCount(idExam, idRoom + "", gender);
    }
    
    public int getCandidatesCount(int idExam, String gender) {
        return getCandidatesCount(idExam, "%", gender);
    }
    
    public int getCandidatesCount(int idExam) {
        return getCandidatesCount(idExam, "%");
    }
    
    public int getCurrentlyAbsentsCount(int idExam) {
        return getCurrentlyAbsentsCount(idExam, "%");
    }
    
    public int getCurrentlyAbsentsCount(int idExam, String gender) {
        int count = 0;
        name = "Candidate c, Room r, Absent a, Branch b, Exam_branch eb";
        HashMap<String, ArrayList> res = super.select(
                new String[] {"count(distinct(c.idCandidate)) as n"}, 
                "c.idCandidate=a.idCandidate and r.idRoom=c.idRoom and b.idBranch=eb.idBranch and " + 
                "c.gender like '" + gender + "' and " +
                "r.idBranch=b.idBranch and eb.idExam=" + idExam + " and " +
                "b.idBranch in ( select p.idBranch from Plan pl, PlMB p where p.idExam=" + idExam + " and " +
                "p.planDate=date('now') and strftime('%H:%M', time('now'))>=pl.startTime and " +
                "time('now')<=time(pl.startTime, strftime('%H', pl.duration) || ' hours', " +
                "strftime('%M', pl.duration) || ' minutes') )");
        try {
            count = (int) res.get("n").get(0);
        }
        catch ( Exception e ) { }
        return count;
    }
    
    private int getSpecialCandidatesCount(int idExam, String idRoom, String gender, String special) {
        int count = 0;
        name = "Candidate c, Room r, " + special + " a, Branch b, Exam_branch eb";
        HashMap<String, ArrayList> res = super.select(
                new String[] {"count(distinct(c.idCandidate)) as n"}, 
                "c.idCandidate=a.idCandidate and r.idRoom=c.idRoom and r.idRoom like '" + idRoom +  "'" +
                " and c.gender like '" + gender + "' " +
                " and b.idBranch=eb.idBranch and r.idBranch=b.idBranch and eb.idExam=" + idExam);
        try {
            count = (int) res.get("n").get(0);
        }
        catch ( Exception e ) { }
        return count;
    }
    
    public int getAbsentsCount(int idExam) {
        return getSpecialCandidatesCount(idExam, "%", "%", "Absent");
    }
    
    public int getAbsentsCount(int idExam, String gender) {
        return getSpecialCandidatesCount(idExam, "%", gender, "Absent");
    }
    
    public int getAbsentsCount(int idExam, int idRoom) {
        return getSpecialCandidatesCount(idExam, idRoom + "", "%", "Absent");
    }
    
    public int getAbsentsCount(int idExam, int idRoom, String gender) {
        return getSpecialCandidatesCount(idExam, idRoom + "", gender, "Absent");
    }
    
    public int getCheatersCount(int idExam) {
        return getSpecialCandidatesCount(idExam, "%", "%", "Cheater");
    }
    
    public int getCheatersCount(int idExam, int idRoom) {
        return getSpecialCandidatesCount(idExam, idRoom + "", "%", "Cheater");
    }
    
    public int getCheatersCount(int idExam, int idRoom, String gender) {
        return getSpecialCandidatesCount(idExam, idRoom + "", gender, "Cheater");
    }
    
    public int getCheatersCount(int idExam, String gender) {
        return getSpecialCandidatesCount(idExam, "%", gender, "Cheater");
    }
    
    public ArrayList<RoomsInfos> getRoomsInfos(int idExam) {
        ArrayList<RoomsInfos> list = new ArrayList();
        HashMap<String, ArrayList> records;
        String whereClause = "b.idBranch=eb.idBranch and r.idBranch=b.idBranch and eb.idExam=" + idExam + " and c.idRoom=r.idRoom and r.idBranch= b.idBranch group by (r.idRoom) order by r.numero asc";
        name = "Room r, Candidate c, Branch b, Exam_branch eb";
        records = super.select(
                new String[] {
                    "r.numero", "b.label", "r.idRoom", "min(c.code) as fCode", 
                    "max(c.code) as lCode", "count(c.idCandidate) as cands"
                }, whereClause);
        
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            list.add(
                new RoomsInfos(
                        (int) records.get("idRoom").get(i), (int) records.get("numero").get(i), (int) records.get("cands").get(i), 
                        (int) records.get("fCode").get(i), (int) records.get("lCode").get(i), 
                        getAbsentsCount(idExam, (int) records.get("idRoom").get(i)), 
                        getCheatersCount(idExam, (int) records.get("idRoom").get(i)), 
                        records.get("label").get(i).toString(), 
                        getAbsentsCount(idExam, (int) records.get("idRoom").get(i), "F"), 
                        getCheatersCount(idExam, (int) records.get("idRoom").get(i), "F"), 
                        getCandidatesCount(idExam, (int) records.get("idRoom").get(i), "F")
                )
            );
        }
        return list;
    }
    
    private HashMap<String, ArrayList> nextEventQuery(int idExam) {
        HashMap<String, ArrayList> records;
        String whereClause = "1 order by x asc limit 1";
        name = "(select planDate, startTime as planTime, strftime('%s', planDate || ' ' || startTime) - strftime('%s', 'now') as x " +
               ", 'start' as label, duration " + 
               "from plan p, PlMB pl " +
               "where p.idPlan=pl.idPlan and x > 0 and idExam=" + idExam + " " +
               "union " +
               "select planDate, time(p.startTime, strftime('%H', time(p.duration)) || ' hours', strftime('%M', time(p.duration)) || ' minutes') as planTime, strftime('%s', planDate || ' ' || strftime('%H:%M', time(p.startTime, strftime('%H', time(p.duration)) || ' hours', strftime('%M', time(p.duration)) || ' minutes'))) - strftime('%s', 'now') as x " +
               ", 'end' as label, duration " + 
               "from plan p, PlMB pl " +
               "where p.idPlan=pl.idPlan and x > 0 and idExam=" + idExam + ")";
        records = super.select(whereClause);
        return records;
    }

    public int getSecondsToNextEvent(int idExam) {
        HashMap<String, ArrayList> records = nextEventQuery(idExam);
        if ( records.isEmpty() )
            return 0;
        return records.get("x").get(0).toString().equals("start") ? (int) records.get("x").get(0) : (int) records.get("x").get(0) * -1 ;
    }

    public Event getNextEvent(int idExam) {
        HashMap<String, ArrayList> records = nextEventQuery(idExam);
        if ( records.isEmpty() || records.get("label").isEmpty() )
            return null;
        Event e = new Event();
        String[] duration = records.get("duration").get(0).toString().split(":");
        e.setPlanType(records.get("label").get(0).toString().equals("start") ? EVENT_TYPE.START : EVENT_TYPE.END);
        e.setPlanDateTime(LocalDateTime.of(LocalDate.parse(records.get("planDate").get(0).toString(), DateTimeFormatter.ISO_DATE), LocalTime.parse(records.get("planTime").get(0).toString(), DateTimeFormatter.ISO_TIME)));
        try {
            e.setDuration(Duration.parse("PT" + duration[0] + "H" + duration[1] + "M"));
        } catch ( Exception ex ) {
            e.setDuration(Duration.ZERO);
        }
        return e;
    }

    public ArrayList<PlanningsInfos> getTodayPlanning(int idExam) {
        ArrayList<PlanningsInfos> list = new ArrayList();
        HashMap<String, ArrayList> records;
        String whereClause = "PlMB.idExam=" + idExam + " and m.idMatter=PlMB.idMatter and " +
                "b.idBranch=Plmb.idBranch and p.idPlan=PlMB.idPlan and " +
                "PlMB.planDate=date('now') order by (startTime) asc";
        name = "Branch b, Matter m, Plan p, PlMB";
        records = super.select(
                new String[] {"b.label as branch, m.label as matter, p.startTime, p.duration"}, whereClause);
        
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            list.add(
                new PlanningsInfos(
                        records.get("branch").get(i).toString(), 
                        records.get("matter").get(i).toString(), 
                        records.get("startTime").get(i).toString(), 
                        records.get("duration").get(i).toString()
                )
            );
        }
        return list;
    }

    public ArrayList<PlanningsInfos> getPlanning(int idExam) {
        ArrayList<PlanningsInfos> list = new ArrayList();
        HashMap<String, ArrayList> records;
        String whereClause = "PlMB.idExam=" + idExam + " and m.idMatter=PlMB.idMatter and " +
                "b.idBranch=Plmb.idBranch and p.idPlan=PlMB.idPlan " +
                "order by PlMB.planDate, startTime, b.idBranch asc";
        name = "Branch b, Matter m, Plan p, PlMB";
        records = super.select(
                new String[] {"b.label as branch, m.label as matter, p.startTime, p.duration, "
                        + "m.idMatter, b.idBranch, PlMB.planDate"}, whereClause);
        
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            list.add(
                new PlanningsInfos(
                        records.get("branch").get(i).toString(), 
                        records.get("matter").get(i).toString(), 
                        records.get("startTime").get(i).toString(), 
                        records.get("duration").get(i).toString(), 
                        records.get("planDate").get(i).toString(),
                        getBranchAbsentsCount(idExam, (int) records.get("idBranch").get(i), (int) records.get("idMatter").get(i), "%"),
                        getBranchAbsentsCount(idExam, (int) records.get("idBranch").get(i), (int) records.get("idMatter").get(i), "F")
                )
            );
        }
        return list;
    }

    public String getRoomAbsents(int idExam, int idRoom, int idMatter) {
        HashMap<String, ArrayList> records;
        String whereClause = "c.idCandidate=a.idCandidate and r.idRoom=c.idRoom and "
                + "b.idBranch=eb.idBranch and "
                + "r.idBranch=b.idBranch and r.idRoom=" + idRoom + 
                " and a.idMatter=" + idMatter + " and eb.idExam=" + idExam
                + " order by (c.code) asc";
        name = "Candidate c, Room r, Absent a, Branch b, Exam_branch eb";
        records = super.select(
                new String[] {"c.code"}, whereClause);
        return records.get("code").stream().map(a -> a + "").collect(Collectors.joining(" - ")).toString();
    }

    public String getRoomAbsents(int idExam, int idRoom, int idMatter, int first, int last) {
        HashMap<String, ArrayList> records;
        String whereClause = "c.idCandidate=a.idCandidate and r.idRoom=c.idRoom and "
                + "b.idBranch=eb.idBranch and "
                + "r.idBranch=b.idBranch and r.idRoom=" + idRoom + 
                " and a.idMatter=" + idMatter + " and eb.idExam=" + idExam +
                " and c.code between " + first + " and " + last + 
                " order by (c.code) asc";
        name = "Candidate c, Room r, Absent a, Branch b, Exam_branch eb";
        records = super.select(
                new String[] {"c.code"}, whereClause);
        return records.get("code").stream().map(a -> a + "").collect(Collectors.joining(" - ")).toString();
    }

    public ArrayList<Integer> getBranchAbsents(int idExam, int idBranch, int idMatter) {
        HashMap<String, ArrayList> records;
        String whereClause = "c.idCandidate=a.idCandidate and r.idRoom=c.idRoom and "
                + "b.idBranch=eb.idBranch and "
                + "r.idBranch=b.idBranch and r.idBranch=" + idBranch + 
                " and a.idMatter=" + idMatter + " and eb.idExam=" + idExam
                + " order by (c.code) asc";
        name = "Candidate c, Room r, Absent a, Branch b, Exam_branch eb";
        records = super.select(
                new String[] {"c.code"}, whereClause);
        return records.get("code");
    }

    public int getBranchAbsentsCount(int idExam, int idBranch, int idMatter, String gender) {
        HashMap<String, ArrayList> res;
        String whereClause = "c.idCandidate=a.idCandidate and r.idRoom=c.idRoom and "
                + "b.idBranch=eb.idBranch and c.gender like '" + gender + "' and "
                + "r.idBranch=b.idBranch and r.idBranch=" + idBranch + 
                " and a.idMatter=" + idMatter + " and eb.idExam=" + idExam
                + " order by (c.code) asc";
        name = "Candidate c, Room r, Absent a, Branch b, Exam_branch eb";
        res = super.select(
                new String[] {"count(*) as n"}, whereClause);
        try {
            return (int) res.get("n").get(0);
        }
        catch ( Exception e ) {
            return 0;
        }
    }

    public ArrayList<Integer> getBranchAbsents(int idExam, int idBranch, int idMatter, int first, int last) {
        HashMap<String, ArrayList> records;
        String whereClause = "c.idCandidate=a.idCandidate and r.idRoom=c.idRoom and "
                + "b.idBranch=eb.idBranch and "
                + "r.idBranch=b.idBranch and r.idBranch=" + idBranch + 
                " and a.idMatter=" + idMatter + " and eb.idExam=" + idExam + 
                " and c.code between " + first + " and " + last + 
                " order by (c.code) asc";
        name = "Candidate c, Room r, Absent a, Branch b, Exam_branch eb";
        records = super.select(
                new String[] {"c.code"}, whereClause);
        return records.get("code");
    }

    private HashMap<String, String> getUseSFLMap(boolean b) {
        HashMap<String, String> map = new HashMap();
        if ( b ) {
            map.put("where", " and SFL.idSFL=cand.idSFL");
            map.put("group-by", ", cand.idSFL");
            map.put("from", ", SFL");
            map.put("select", "(m.label || ' - ' || SFL.label) mat");
        }
        else {
            map.put("where", "");
            map.put("group-by", "");
            map.put("from", "");
            map.put("select", "m.label mat");
        }
        return map;
    }
    
    private ArrayList<RoomPageInfos> getRoomPages(String fields, String whereClause, int idExam) {
        ArrayList<RoomPageInfos> list = new ArrayList();
        HashMap<String, ArrayList> records;
        records = super.select(new String[] {fields}, whereClause);
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            RoomPageInfos npi = new RoomPageInfos(
                (int) records.get("numero").get(i),
                records.get("centerName").get(i).toString(),
                records.get("direction").get(i).toString(),
                records.get("bra").get(i).toString(),
                records.get("examLevel").get(i).toString(),
                records.get("mat").get(i).toString(),
                (int) records.get("papers").get(i),
                (int) records.get("firstCode").get(i),
                (int) records.get("lastCode").get(i),
                getRoomAbsents(
                    idExam,
                    (int) records.get("idRoom").get(i),
                    (int) records.get("idMatter").get(i),
                    (int) records.get("firstCode").get(i),
                    (int) records.get("lastCode").get(i))
            );
            list.add(npi);
        }
        return list;
    }
    
    public ArrayList<RoomPageInfos> getAllRoomPages(int idExam, String idMatter, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and m.idMatter like '" + idMatter + "' and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and pl.idPlan=p.idPlan" +
            sfl.get("where") + " " +
            "group by r.idRoom, m.idMatter" + sfl.get("group-by") + " " +
            "order by r.numero, m.idMatter";
        String fields = "e.examLevel, r.idRoom, r.numero, c.label centerName, c.direction, " +
                            sfl.get("select") + ", " +
                            "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                            "min(cand.code) firstCode, max(cand.code) lastCode";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl" + sfl.get("from");
        return getRoomPages(fields, whereClause, idExam);
    }

    public ArrayList<RoomPageInfos> getTodayRoomPages(int idExam, String idMatter, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and m.idMatter like '" + idMatter + "' and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and pl.idPlan=p.idPlan and " +
            "p.planDate=date('now') and SFL.idSFL=cand.idSFL " +
            sfl.get("where") + " " +
            "group by r.idRoom, m.idMatter" + sfl.get("group-by") + " " +
            "order by r.numero, m.idMatter";
        String fields = "e.examLevel, r.idRoom, r.numero, c.label centerName, c.direction, " +
                            sfl.get("select") + ", " +
                            "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                            "min(cand.code) firstCode, max(cand.code) lastCode";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl" + sfl.get("from");
        return getRoomPages(fields, whereClause, idExam);
    }
    
    public ArrayList<RoomPageInfos> getCurrentRoomPages(int idExam, String idMatter, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and m.idMatter like '" + idMatter + "' and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and pl.idPlan=p.idPlan and " +
            "p.planDate=date('now') and strftime('%H:%M', time('now'))>=pl.startTime and " +
            "time('now')<=time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes')" +
            sfl.get("where") + " " +
            "group by r.idRoom, m.idMatter" + sfl.get("group-by") + " " +
            "order by r.numero, m.idMatter";
        String fields = "e.examLevel, r.idRoom, r.numero, c.label centerName, c.direction, " +
                            sfl.get("select") + ", " +
                            "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                            "min(cand.code) firstCode, max(cand.code) lastCode";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl" + sfl.get("from");
        return getRoomPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getCurrentBranchPages(int idExam, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and pl.idPlan=p.idPlan and " +
            "p.planDate=date('now') and strftime('%H:%M', time('now'))>=pl.startTime and " +
            "time('now')<=time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes') " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                        "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                        "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getCurrentBranchesPages(int idExam, int firstRoom, int lastRoom, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and pl.idPlan=p.idPlan and " +
            "p.planDate=date('now') and strftime('%H:%M', time('now'))>=pl.startTime and " +
            "time('now')<=time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes') and " +
            "r.numero between ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + firstRoom + ") and ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + lastRoom + ") " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
            "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
            "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getMatterCurrentPages(int idExam, int idMatter, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and m.idMatter=" + idMatter + 
            " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and pl.idPlan=p.idPlan and " +
            "p.planDate=date('now') and strftime('%H:%M', time('now'))>=pl.startTime and " +
            "time('now')<=time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes') " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
            "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
            "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getBranchMatterCurrentPages(int idExam, int idMatter, int firstRoom, int lastRoom, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and m.idMatter=" + idMatter + 
            " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and pl.idPlan=p.idPlan and " +
            "p.planDate=date('now') and strftime('%H:%M', time('now'))>=pl.startTime and " +
            "time('now')<=time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes') and " +
            "r.numero between ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + firstRoom + ") and ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + lastRoom + ") " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
            "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
            "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getTodayBranchesPages(int idExam, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "p.planDate=date('now') " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getTodayBranchesPages(int idExam, int firstRoom, int lastRoom, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "p.planDate=date('now') and " +
            "r.numero between ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + firstRoom + ") and ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + lastRoom + ") " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getMatterTodayPages(int idExam, int idMatter, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and m.idMatter=" + idMatter + 
            " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "p.planDate=date('now') " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getBranchMatterTodayPages(int idExam, int idMatter, int firstRoom, int lastRoom, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and m.idMatter=" + idMatter + 
            " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "p.planDate=date('now') and " +
            "r.numero between ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + firstRoom + ") and ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + lastRoom + ") " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getAllBranchesPages(int idExam, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getAllBranchesPages(int idExam, int firstRoom, int lastRoom, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "r.numero between ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + firstRoom + ") and ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + lastRoom + ") " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getMatterAllPages(int idExam, int idMatter, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and m.idMatter=" + idMatter + " and " + 
            "e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
 
    public ArrayList<BranchPageInfos> getBranchMatterAllPages(int idExam, int idMatter, int firstRoom, int lastRoom, boolean useSFL) {
        HashMap<String, String> sfl = getUseSFLMap(useSFL);
        String whereClause = "e.idExam=" + idExam + " and m.idMatter=" + idMatter + " and " + 
            "e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and " +
            "b.idBranch=r.idBranch and r.idRoom=cand.idRoom and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "r.numero between ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + firstRoom + ") and ((select min(numero) from Room rx, Exam_branch ebx where ebx.idExam=e.idExam and rx.idBranch=b.idBranch and rx.idBranch=ebx.idBranch) + " + lastRoom + ") " +
            sfl.get("where") + " " +
            "group by b.idBranch, m.idMatter" + sfl.get("group-by") + " " +
            "order by b.idBranch, m.idMatter";
        name = "Room r, Center c, Exam e, Branch b, Candidate cand, " +
               "Exam_branch eb, PlMB p, Matter m" + sfl.get("from");
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, " +
                        sfl.get("select") + ", " +
                "m.idMatter, b.label bra, count(cand.idCandidate) as papers, " +
                "min(cand.code) firstCode, max(cand.code) lastCode, e.examSession as session";
        return getBranchPages(fields, whereClause, idExam);
    }
    
    public ArrayList<Integer> getPosteriorMatters(int idExam, int idMatter) {
        String whereClause = "p1.idPlan = pl1.idPlan and p2.idPlan = pl2.idPlan and "
                + "p2.idMatter = " + idMatter + " and "
                + "( (pl1.startTime > pl2.startTime and p1.planDate = p2.planDate) or "
                + "p1.planDate > p2.planDate) and p1.idExam = " + idExam + " and p2.idExam = " + idExam +
                " order by p1.planDate";
        name = "PlMB p1, PlMB p2, Plan pl1, Plan pl2";
        HashMap<String, ArrayList> records;
        ArrayList<Integer> matters = new ArrayList();
        records = super.select(
                new String[] {"p1.idMatter"}, whereClause);
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            matters.add((int) records.get("idMatter").get(i));
        }
        return matters;
    }
 
    public ArrayList<TrialPageInfos> getAllBranchTrialPages(int idExam, String idBranch) {
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and b.idBranch like '" + idBranch + "' and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "p.idPlan=pl.idPlan and r.idRegion=c.idRegion " +
            "group by b.idBranch, m.idMatter " +
            "order by dt, startTime";
        name = "Center c, Exam e, Branch b, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl, Region r";
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, r.labelAR, r.labelTA, m.label mat, p.planDate as dt, " +
                "m.idMatter, b.label bra, pl.startTime, pl.duration, e.examSession as session, " +
                "strftime('%H:%M', time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes')) as endTime, " +
                "strftime('%H:%M', time(pl.startTime, '-15 minutes')) as openingTime, " + 
                "strftime('%H:%M', time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes', '+15 minutes')) as closingTime";
        return getTrialPages(fields, whereClause, idExam);
    }
 
    public ArrayList<TrialPageInfos> getTodayBranchTrialPages(int idExam, String idBranch) {
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and b.idBranch like '" + idBranch + "' and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and r.idRegion=c.idRegion and " +
            "p.idPlan=pl.idPlan and p.planDate=date('now') " +
            "group by b.idBranch, m.idMatter " +
            "order by dt, startTime";
        name = "Center c, Exam e, Branch b, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl, Region r";
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, r.labelAR, r.labelTA, m.label mat, p.planDate as dt, " +
                "m.idMatter, b.label bra, pl.startTime, pl.duration, e.examSession as session, " +
                "strftime('%H:%M', time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes')) as endTime, " +
                "strftime('%H:%M', time(pl.startTime, '-15 minutes')) as openingTime, " + 
                "strftime('%H:%M', time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes', '+15 minutes')) as closingTime";
        return getTrialPages(fields, whereClause, idExam);
    }
 
    public ArrayList<TrialPageInfos> getCurrentBranchTrialPages(int idExam, String idBranch) {
        String whereClause = "e.idExam=" + idExam + " and e.idExam=eb.idExam and e.idExam=p.idExam and " +
            "eb.idBranch=b.idBranch and b.idBranch=p.idBranch and b.idBranch like '" + idBranch + "' and " +
            "p.idMatter=m.idMatter and c.idCenter=e.idCenter and " +
            "p.idPlan=pl.idPlan and c.idRegion=r.idRegion and " +
            "p.planDate=date('now') and strftime('%H:%M', time('now'))>=pl.startTime and " +
            "time('now')<=time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes') " +
            "group by b.idBranch, m.idMatter " +
            "order by dt, startTime";
        name = "Center c, Exam e, Branch b, " +
               "Exam_branch eb, PlMB p, Matter m, Plan pl, Region r";
        String fields = "e.examLevel, b.idBranch, c.label centerName, c.direction, r.labelAR, r.labelTA, m.label mat, p.planDate as dt, " +
                "m.idMatter, b.label bra, pl.startTime, pl.duration, e.examSession as session, " +
                "strftime('%H:%M', time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes')) as endTime, " +
                "strftime('%H:%M', time(pl.startTime, '-15 minutes')) as openingTime, " + 
                "strftime('%H:%M', time(pl.startTime, strftime('%H', pl.duration) || ' hours', strftime('%M', pl.duration) || ' minutes', '+15 minutes')) as closingTime";
        return getTrialPages(fields, whereClause, idExam);
    }
 
    public ArrayList<TrialPageInfos> getAllBranchTrialPages(int idExam) {
        return getAllBranchTrialPages(idExam, "%");
    }
 
    public ArrayList<TrialPageInfos> getTodayBranchTrialPages(int idExam) {
        return getTodayBranchTrialPages(idExam, "%");
    }
 
    public ArrayList<TrialPageInfos> getCurrentBranchTrialPages(int idExam) {
        return getCurrentBranchTrialPages(idExam, "%");
    }
 
    private ArrayList<BranchPageInfos> getBranchPages(String fields, String whereClause, int idExam) {
        ArrayList<BranchPageInfos> list = new ArrayList();
        HashMap<String, ArrayList> records;
        ArrayList<Integer> absents = new ArrayList();
        int idBranch, idMatter;
        records = super.select(
                new String[] {fields}, whereClause);
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            idBranch = (int) records.get("idBranch").get(i);
            idMatter = (int) records.get("idMatter").get(i);
            absents.clear();
            absents.addAll(getBranchAbsents(
                    idExam,
                    idBranch,
                    idMatter,
                    (int) records.get("firstCode").get(i),
                    (int) records.get("lastCode").get(i)));

            BranchPageInfos npi = new BranchPageInfos(
                records.get("session").get(i).toString(),
                absents.size(),
                records.get("centerName").get(i).toString(),
                records.get("direction").get(i).toString(),
                records.get("bra").get(i).toString(),
                records.get("examLevel").get(i).toString(),
                records.get("mat").get(i).toString(),
                (int) records.get("papers").get(i),
                (int) records.get("firstCode").get(i),
                (int) records.get("lastCode").get(i),
                absents.stream().map(a -> a + "").collect(Collectors.joining(" - "))
            );
            npi.setIdBranch(idBranch);
            npi.setIdMatter(idMatter);
            list.add(npi);
        }
        return list;
    }
 
    private ArrayList<TrialPageInfos> getTrialPages(String fields, String whereClause, int idExam) {
        ArrayList<TrialPageInfos> list = new ArrayList();
        HashMap<String, ArrayList> records;
        records = super.select(
                new String[] {fields}, whereClause);
        for ( int i = 0, n = records.get(records.keySet().iterator().next()).size(); i < n; i++ ) {
            TrialPageInfos tpi = new TrialPageInfos();
            tpi.setBranch(records.get("bra").get(i).toString());
            tpi.setCenter(records.get("centerName").get(i).toString());
            tpi.setDate(DateTime.getArabicDate(records.get("dt").get(i).toString()));
            tpi.setDirection(records.get("direction").get(i).toString());
            tpi.setRegionAR(records.get("labelAR").get(i).toString());
            tpi.setRegionTA(records.get("labelTA").get(i).toString());
            tpi.setDuration(records.get("duration").get(i).toString());
            tpi.setHour(records.get("startTime").get(i).toString());
            tpi.setEnd(records.get("endTime").get(i).toString());
            tpi.setOpening(records.get("openingTime").get(i).toString());
            tpi.setClosing(records.get("closingTime").get(i).toString());
            tpi.setLevel(records.get("examLevel").get(i).toString());
            tpi.setMatter(records.get("mat").get(i).toString());
            list.add(tpi);
        }
        return list;
    }
}