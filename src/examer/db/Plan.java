package examer.db;


import examer.Settings;
import java.util.ArrayList;
import java.util.HashMap;
import org.sicut.sqlite.Table;

/**
 *
 * Generated by: S2JConverter
 * at 2020-12-24, 16:22:08
 * @author Hafid KASSIMI
 */

public final class Plan extends Table {
    
    
    private int idPlan;
    private String startTime;
    private String duration;
    private int seance;
    private String period;

    public Plan() {
        super();
        setDatabase(Settings.DB_PATH);
        name = "Plan";
    }
    
    public Plan(int idPlan, String startTime, String duration, int seance, String period) {
        this();
        
        this.idPlan = idPlan;
        this.startTime = startTime;
        this.duration = duration;
        this.seance = seance;
        this.period = period;
    }
    
    public Plan(int idPlan) {
        this();
        HashMap<String, ArrayList> res = super.select("1 and idPlan='" + idPlan + "'");
        
        this.idPlan = idPlan;
        if ( res.get(res.keySet().iterator().next()).size() > 0 ) {
            
            startTime = res.get("startTime").get(0).toString();
            duration = res.get("duration").get(0).toString();
            seance = (int) res.get("seance").get(0);
            period = res.get("period").get(0).toString();
        }
        else {
            
            startTime = "";
            duration = "";
            seance = -1;
            period = "";
        }
    }
    
    public boolean reload() {
        HashMap<String, ArrayList> res = super.select("1 and idPlan='" + idPlan + "'");
        if ( res.get(res.keySet().iterator().next()).size() > 0 ) {
            startTime = res.get("startTime").get(0).toString();
            duration = res.get("duration").get(0).toString();
            seance = (int) res.get("seance").get(0);
            period = res.get("period").get(0).toString();
            return true;
        }
        else {
            startTime = "";
            duration = "";
            seance = -1;
            period = "";
            return false;
        }
    }
    
    public ArrayList<Plan> list() {
        HashMap<String, ArrayList> res = super.select("1 order by startTime, duration");
        ArrayList<Plan> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( new Plan( (int) res.get("idPlan").get(i), res.get("startTime").get(i).toString(), res.get("duration").get(i).toString(), (int) res.get("seance").get(i), res.get("period").get(i).toString()  ) );
        }
        return l;
    }
    
    public boolean delete() {
        return delete2("1 and idPlan='" + idPlan + "'");
    }
    
    public boolean deleteAll(int idExam) {
        return delete2("1 and idPlan in (select idPlan from Plmb where idExam='" + idExam + "')");
    }
    
    public boolean update() {
        
        fv_pairs.put("idPlan", idPlan);
        fv_pairs.put("startTime", startTime);
        fv_pairs.put("duration", duration);
        fv_pairs.put("seance", seance);
        fv_pairs.put("period", period);
        return update2("1 and idPlan='" + idPlan + "'");
    }
    
    public boolean save() {
        
        fv_pairs.put("idPlan", idPlan);
        fv_pairs.put("startTime", startTime);
        fv_pairs.put("duration", duration);
        fv_pairs.put("seance", seance);
        fv_pairs.put("period", period);
        return insert();
    }
    
    
    public int nextIdplan() {
        HashMap<String, ArrayList> res = super.select(new String[] {"max(idPlan) as idPlan"}, "1");
        try {
            return (int) res.get("idPlan").get(0) + 1;
        }
        catch ( Exception e ) {
            return 1;
        }
    }
    
    public boolean exists() {
        HashMap<String, ArrayList> res = super.select(new String[] {"count(*) as n"}, "startTime='" + startTime + "' and " + "duration='" + duration + "' and " + "seance='" + seance + "' and " + "period='" + period + "'");
        int n = 0;
        try {
            n = (int) res.get("n").get(0);
        }
        catch ( Exception e ) { }
        return n > 0;
    }
    
    
    public void setIdplan(int idPlan) {
        this.idPlan = idPlan;
    }

    public int getIdplan() {
        return idPlan;
    }
    public void setStarttime(String startTime) {
        this.startTime = startTime;
    }

    public String getStarttime() {
        return startTime;
    }
    public void setDuration(String duration) {
        this.duration = duration;
    }

    public String getDuration() {
        return duration;
    }
    public void setSeance(int seance) {
        this.seance = seance;
    }

    public int getSeance() {
        return seance;
    }
    public void setPeriod(String period) {
        this.period = period;
    }

    public String getPeriod() {
        return period;
    }

    public void clone(Plan plan) {
        this.idPlan = plan.idPlan;
        this.startTime = plan.startTime;
        this.duration = plan.duration;
        this.seance = plan.seance;
        this.period = plan.period;
    }

    @Override
    public String toString() {
        return Settings.I18N_BUNDLE.getString("START_SC") + startTime + " | " +
                Settings.I18N_BUNDLE.getString("DURATION_SC") + duration;
    }

}