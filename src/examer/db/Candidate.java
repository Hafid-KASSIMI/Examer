
package examer.db;


import examer.Settings;
import java.util.ArrayList;
import java.util.HashMap;
import org.sicut.sqlite.Table;

/**
 *
 * Generated by: S2JConverter
 * at 2020-12-24, 16:22:08
 * @author Hafid KASSIMI
 */

public final class Candidate extends Table {
    
    
    private int idCandidate;
    private int code;
    private String gender;
    private int idSFL;
    private int idRoom;

    public Candidate() {
        super();
        setDatabase(Settings.DB_PATH);
        name = "Candidate";
    }
    
    public Candidate(int idCandidate, int code, String gender, int idSFL, int idRoom) {
        this();
        
        this.idCandidate = idCandidate;
        this.code = code;
        this.gender = gender;
        this.idSFL = idSFL;
        this.idRoom = idRoom;
    }
    
    public void clone(Candidate cand) {
        this.idCandidate = cand.getIdcandidate();
        this.code = cand.getCode();
        this.gender = cand.getGender();
        this.idSFL = cand.getIdsfl();
        this.idRoom = cand.getIdroom();
    }
    
    public Candidate(int idCandidate) {
        this();
        HashMap<String, ArrayList> res = super.select("1 and idCandidate='" + idCandidate + "'");
        
        this.idCandidate = idCandidate;
        if ( res.get(res.keySet().iterator().next()).size() > 0 ) {
            
            code = (int) res.get("code").get(0);
            gender = res.get("gender").get(0).toString();
            idSFL = (int) res.get("idSFL").get(0);
            idRoom = (int) res.get("idRoom").get(0);
        }
        else {
            
            code = -1;
            gender = "";
            idSFL = -1;
            idRoom = -1;
        }
    }
    
    public ArrayList<Candidate> listRoom() {
        HashMap<String, ArrayList> res = super.select("1 and idRoom='" + idRoom + "'");
        ArrayList<Candidate> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( new Candidate( (int) res.get("idCandidate").get(i), (int) res.get("code").get(i), res.get("gender").get(i).toString(), (int) res.get("idSFL").get(i), (int) res.get("idRoom").get(i) ) );
        }
        return l;
    }
    
    public ArrayList<Candidate> list() {
        HashMap<String, ArrayList> res = super.select();
        ArrayList<Candidate> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( new Candidate( (int) res.get("idCandidate").get(i), (int) res.get("code").get(i), res.get("gender").get(i).toString(), (int) res.get("idSFL").get(i), (int) res.get("idRoom").get(i) ) );
        }
        return l;
    }
    
    public boolean delete() {
        return delete2("1 and idCandidate='" + idCandidate + "'");
    }
    
    public boolean deleteAll() {
        return delete2("1 and idRoom='" + idRoom + "'");
    }
    
    public boolean cleanRoom() {
        return delete2("1 and idRoom='" + idRoom + "'");
    }
    
    public boolean cleanRoom(int idRoom) {
        return delete2("1 and idRoom='" + idRoom + "'");
    }
    
    public boolean cleanBranch(int idBranch) {
        return delete2("1 and idRoom in (select idRoom from Room where idBranch='" + idBranch + "')");
    }
    
    public boolean update() {
        
        fv_pairs.put("idCandidate", idCandidate);
        fv_pairs.put("code", code);
        fv_pairs.put("gender", gender);
        fv_pairs.put("idSFL", idSFL);
        fv_pairs.put("idRoom", idRoom);
        return update2("1 and idCandidate='" + idCandidate + "'");
    }
    
    public boolean save() {
        
        fv_pairs.put("idCandidate", idCandidate);
        fv_pairs.put("code", code);
        fv_pairs.put("gender", gender);
        fv_pairs.put("idSFL", idSFL);
        fv_pairs.put("idRoom", idRoom);
        return insert();
    }
    
    public boolean batchSave() {
        
        fv_pairs.put("idCandidate", idCandidate);
        fv_pairs.put("code", code);
        fv_pairs.put("gender", gender);
        fv_pairs.put("idSFL", idSFL);
        fv_pairs.put("idRoom", idRoom);
        return batchInsert();
    }
    
    
    public int nextIdcandidate() {
        HashMap<String, ArrayList> res = super.select(new String[] {"max(idCandidate) as idCandidate"}, "1");
        try {
            return (int) res.get("idCandidate").get(0) + 1;
        }
        catch ( Exception e ) {
            return 1;
        }
    }
    
    public int count() {
        HashMap<String, ArrayList> res = super.select(new String[] {"count(idCandidate) as n"}, "1 and idRoom='" + idRoom + "'");
        try {
            return (int) res.get("n").get(0);
        }
        catch ( Exception e ) {
            return 0;
        }
    }  
    
    public void setIdcandidate(int idCandidate) {
        this.idCandidate = idCandidate;
    }

    public int getIdcandidate() {
        return idCandidate;
    }
    public void setCode(int code) {
        this.code = code;
    }

    public int getCode() {
        return code;
    }
    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getGender() {
        return gender;
    }
    public void setIdsfl(int idSFL) {
        this.idSFL = idSFL;
    }

    public int getIdsfl() {
        return idSFL;
    }
    public void setIdroom(int idRoom) {
        this.idRoom = idRoom;
    }

    public int getIdroom() {
        return idRoom;
    }

    @Override
    public String toString() {
        return code + "";
    }

}