package examer.db;


import examer.Settings;
import java.util.ArrayList;
import java.util.HashMap;
import org.sicut.sqlite.Table;

/**
 *
 * Generated by: S2JConverter
 * at 2020-12-24, 16:22:08
 * @author Hafid KASSIMI
 */

public final class Exam_branch extends Table {
    
    
    private int idExam;
    private int idBranch;
    private String startingDate;

    public Exam_branch() {
        super();
        setDatabase(Settings.DB_PATH);
        name = "Exam_branch";
    }
    
    public Exam_branch(int idExam, int idBranch, String startingDate) {
        this();
        
        this.idExam = idExam;
        this.idBranch = idBranch;
        this.startingDate = startingDate;
    }
    
    public Exam_branch(int idExam, int idBranch) {
        this();
        HashMap<String, ArrayList> res = super.select("1 and idExam='" + idExam + "' and idBranch='" + idBranch + "'");
        
        this.idExam = idExam;
        this.idBranch = idBranch;
        if ( res.get(res.keySet().iterator().next()).size() > 0 ) {
            
            startingDate = res.get("startingDate").get(0).toString();
        }
        else {
            
            startingDate = "";
        }
    }
    
    public ArrayList<Exam_branch> list() {
        HashMap<String, ArrayList> res = super.select();
        ArrayList<Exam_branch> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( new Exam_branch( (int) res.get("idExam").get(i), (int) res.get("idBranch").get(i), res.get("startingDate").get(i).toString() ) );
        }
        return l;
    }
    
    public boolean delete() {
        return delete2("1 and idExam='" + idExam + "' and idBranch='" + idBranch + "'");
    }
    
    public boolean cleanBranch() {
        return delete2("1 and idBranch='" + idBranch + "'");
    }
    
    public boolean cleanBranch(int idBranch) {
        return delete2("1 and idBranch='" + idBranch + "'");
    }
    
    public boolean cleanExam() {
        return delete2("1 and idExam='" + idExam + "'");
    }
    
    public boolean cleanExam(int idExam) {
        return delete2("1 and idExam='" + idExam + "'");
    }
    
    public boolean update() {
        
        fv_pairs.put("idExam", idExam);
        fv_pairs.put("idBranch", idBranch);
        fv_pairs.put("startingDate", startingDate);
        return update2("1 and idExam='" + idExam + "' and idBranch='" + idBranch + "'");
    }
    
    public boolean save() {
        
        fv_pairs.put("idExam", idExam);
        fv_pairs.put("idBranch", idBranch);
        fv_pairs.put("startingDate", startingDate);
        return insert();
    }
    
    public int count() {
        HashMap<String, ArrayList> res = super.select(new String[] {"count(*) as n"}, "1 and idExam='" + idExam + "' and idBranch='" + idBranch + "'");
        try {
            return (int) res.get("n").get(0);
        }
        catch ( Exception e ) {
            return 0;
        }
    }
    
    public int nextIdexam() {
        HashMap<String, ArrayList> res = super.select(new String[] {"max(idExam) as idExam"}, "1");
        try {
            return (int) res.get("idExam").get(0) + 1;
        }
        catch ( Exception e ) {
            return 1;
        }
    }
    public int nextIdbranch() {
        HashMap<String, ArrayList> res = super.select(new String[] {"max(idBranch) as idBranch"}, "1");
        try {
            return (int) res.get("idBranch").get(0) + 1;
        }
        catch ( Exception e ) {
            return 1;
        }
    }
    
    
    public void setIdexam(int idExam) {
        this.idExam = idExam;
    }

    public int getIdexam() {
        return idExam;
    }
    public void setIdbranch(int idBranch) {
        this.idBranch = idBranch;
    }

    public int getIdbranch() {
        return idBranch;
    }
    public void setStartingdate(String startingDate) {
        this.startingDate = startingDate;
    }

    public String getStartingdate(boolean low) {
        if ( !low )
            return startingDate;
        HashMap<String, ArrayList> res = super.select("1 and idExam='" + idExam + "' and idBranch='" + idBranch + "'");
        if ( res.get(res.keySet().iterator().next()).size() > 0 ) {
            startingDate = res.get("startingDate").get(0).toString();
        }
        else {
            
            startingDate = "";
        }
        return startingDate;
    }

}