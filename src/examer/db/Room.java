package examer.db;


import examer.Settings;
import java.util.ArrayList;
import java.util.HashMap;
import org.sicut.sqlite.Table;

/**
 *
 * Generated by: S2JConverter
 * at 2020-12-24, 16:22:08
 * @author Hafid KASSIMI
 */

public final class Room extends Table {
    
    
    private int idRoom;
    private int numero;
    private int idBranch;
    private String customString;
    private final String examClause;

    public Room() {
        super();
        setDatabase(Settings.DB_PATH);
        name = "Room";
        customString = "";
        examClause = "idBranch in (select b.idBranch from Branch b, Exam_branch eb " +
                "where b.idBranch=eb.idBranch and eb.idExam=%d)";
    }
    
    public Room(int idRoom, int numero, int idBranch) {
        this();
        
        this.idRoom = idRoom;
        this.numero = numero;
        this.idBranch = idBranch;
    }
    
    public Room(int idRoom) {
        this();
        HashMap<String, ArrayList> res = super.select("1 and idRoom='" + idRoom + "'");
        
        this.idRoom = idRoom;
        if ( res.get(res.keySet().iterator().next()).size() > 0 ) {
            
            numero = (int) res.get("numero").get(0);
            idBranch = (int) res.get("idBranch").get(0);
        }
        else {
            
            numero = -1;
            idBranch = -1;
        }
    }
    
    public ArrayList<Room> list() {
        HashMap<String, ArrayList> res = super.select();
        ArrayList<Room> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( new Room( (int) res.get("idRoom").get(i), (int) res.get("numero").get(i), (int) res.get("idBranch").get(i) ) );
        }
        return l;
    }
    
    public ArrayList<Room> listBranchRooms(int idExam) {
        HashMap<String, ArrayList> res = super.select("idBranch=" + idBranch + " and " + String.format(examClause, idExam));
        ArrayList<Room> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( new Room( (int) res.get("idRoom").get(i), (int) res.get("numero").get(i), idBranch ) );
        }
        return l;
    }
    
    public ArrayList<Integer> getBranchRoomsNumeros(int idExam) {
        HashMap<String, ArrayList> res = super.select("idBranch=" + idBranch + " and " + String.format(examClause, idExam));
        ArrayList<Integer> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( (int) res.get("numero").get(i) );
        }
        return l;
    }
    
    public ArrayList<Room> listExamRooms(int idExam) {
        HashMap<String, ArrayList> res = super.select(String.format(examClause, idExam));
        ArrayList<Room> l = new ArrayList();
        for ( int i = 0, n = res.get(res.keySet().iterator().next()).size(); i < n; i++ ) {
            l.add( new Room( (int) res.get("idRoom").get(i), (int) res.get("numero").get(i), idBranch ) );
        }
        return l;
    }
    
    public boolean delete() {
        return delete2("1 and idRoom='" + idRoom + "'");
    }
    
    public boolean cleanExamBranch(int idExam) {
        return delete2("1 and idBranch=" + idBranch + " and " + String.format(examClause, idExam));
    }
    
    public boolean cleanExamBranch(int idExam, int idBranch) {
        return delete2("idBranch=" + idBranch + " and " + String.format(examClause, idExam));
    }
    
    public boolean cleanBranch() {
        return delete2("1 and idBranch='" + idBranch + "'");
    }
    
    public boolean cleanBranch(int idBranch) {
        return delete2("1 and idBranch='" + idBranch + "'");
    }
    
    public boolean deleteAll(int idExam) {
        return delete2(String.format(examClause, idExam));
    }
    
    public boolean batchDelete() {
        return super.batchDelete("1 and idRoom='" + idRoom + "'");
    }
    
    public boolean update() {
        
        fv_pairs.put("idRoom", idRoom);
        fv_pairs.put("numero", numero);
        fv_pairs.put("idBranch", idBranch);
        return update2("1 and idRoom='" + idRoom + "'");
    }
    
    public boolean save() {
        
        fv_pairs.put("idRoom", idRoom);
        fv_pairs.put("numero", numero);
        fv_pairs.put("idBranch", idBranch);
        return insert();
    }
    
    public boolean batchSave() {
        
        fv_pairs.put("idRoom", idRoom);
        fv_pairs.put("numero", numero);
        fv_pairs.put("idBranch", idBranch);
        return batchInsert();
    }
    
    public int nextIdroom() {
        HashMap<String, ArrayList> res = super.select(new String[] {"max(idRoom) as idRoom"}, "1");
        try {
            return (int) res.get("idRoom").get(0) + 1;
        }
        catch ( Exception e ) {
            return 1;
        }
    }
    
    public int getMaxNumero() {
        HashMap<String, ArrayList> res = super.select(new String[] {"max(numero) as x"}, "1");
        try {
            return (int) res.get("x").get(0);
        }
        catch ( Exception e ) {
            return 0;
        }
    }
    
    public int getMaxNumero(int idExam) {
        HashMap<String, ArrayList> res = super.select(new String[] {"max(numero) as x"}, String.format(examClause, idExam));
        try {
            return (int) res.get("x").get(0);
        }
        catch ( Exception e ) {
            return 0;
        }
    }
    
    public int getExamBranchRoomsCount(int idExam) {
        HashMap<String, ArrayList> res = super.select(
                new String[] {"count(idRoom) as n"}, 
                "1 and idBranch=" + idBranch + " and " + String.format(examClause, idExam));
        try {
            return (int) res.get("n").get(0);
        }
        catch ( Exception e ) {
            return 0;
        }
    }
    
    public int count(int idExam) {
        HashMap<String, ArrayList> res = super.select(
                new String[] {"count(idRoom) as n"}, String.format(examClause, idExam));
        try {
            return (int) res.get("n").get(0);
        }
        catch ( Exception e ) {
            return 0;
        }
    }
    
    public void setIdroom(int idRoom) {
        this.idRoom = idRoom;
    }

    public int getIdroom() {
        return idRoom;
    }
    public void setNumero(int numero) {
        this.numero = numero;
    }

    public int getNumero() {
        return numero;
    }

    public String stringifyNumero() {
        return ( numero > 9 ? "" : "0" ) + numero;
    }
    public void setIdbranch(int idBranch) {
        this.idBranch = idBranch;
    }

    public int getIdbranch() {
        return idBranch;
    }

    public void setCustomString(String customString) {
        this.customString = customString;
    }

    @Override
    public String toString() {
        return customString.isEmpty() ? numero + "" : customString;
    }

}